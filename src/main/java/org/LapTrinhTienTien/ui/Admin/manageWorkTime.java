/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.LapTrinhTienTien.ui.Admin;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.table.DefaultTableModel;
import org.LapTrinhTienTien.model.LichLam;
import org.LapTrinhTienTien.repository.LichLamRepository;
import org.LapTrinhTienTien.service.LichLamService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 *
 * @author phata
 */
@Service
public class manageWorkTime extends javax.swing.JPanel {
    private LichLamService lichLamService;
    /**
     * Creates new form manageWorkTime
     */
    public manageWorkTime(@Autowired LichLamService lichLamService) {
        this.lichLamService = lichLamService;
        initComponents();
        //loadDates();
        cbCaLam.addItem("CA001");
        cbCaLam.addItem("CA002");
        cbCaLam.addItem("CA003");
    }
    private void loadDates() {
        cbDate.removeAllItems(); // Xóa hết các items trong combobox

        // Lấy ngày hiện tại
        LocalDate currentDate = LocalDate.now();

        // Sử dụng DateTimeFormatter để định dạng ngày theo "dd-MM-yyyy"
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");

        // Thêm 10 ngày trước ngày hiện tại vào ComboBox
        for (int i = -10; i <= 0; i++) {
            LocalDate previousDate = currentDate.plusDays(i);
            String formattedDate = previousDate.format(formatter);
            cbDate.addItem(formattedDate);
        }

        // Thêm ngày hiện tại vào ComboBox
        cbDate.addItem(currentDate.format(formatter));

        // Thêm 10 ngày sau ngày hiện tại vào ComboBox
        for (int i = 1; i <= 10; i++) {
            LocalDate nextDate = currentDate.plusDays(i);
            String formattedDate = nextDate.format(formatter);
            cbDate.addItem(formattedDate);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbDate = new javax.swing.JComboBox<>();
        cbCaLam = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnTim = new javax.swing.JButton();

        cbDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbCaLam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnTim.setLabel("Tìm");
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cbCaLam, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(btnTim)))
                .addContainerGap(408, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCaLam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTim)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimActionPerformed
        String selectedDate = (String) cbDate.getSelectedItem();
        String selectedShift = (String) cbCaLam.getSelectedItem();

        // Chuyển đổi selectedDate sang kiểu LocalDate
        LocalDate ngay = LocalDate.parse(selectedDate); // Cần xử lý ngoại lệ khi parse

        // Gọi phương thức tìm kiếm từ service
       // String maNhanVien = lichLamService.findMaNVByMaCaAndNgayThangNam(selectedShift, ngay);

        // Xóa dữ liệu hiện có trong jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        // Thêm dữ liệu vào jTable1 nếu tìm thấy mã nhân viên
//        if (maNhanVien != null) {
//            // Thêm hàng mới vào jTable1
//            model.addRow(new Object[]{maNhanVien});
//        }
    }//GEN-LAST:event_btnTimActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTim;
    private javax.swing.JComboBox<String> cbCaLam;
    private javax.swing.JComboBox<String> cbDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
